package MQ;

import java.math.BigInteger;
import java.util.ArrayList;

/**
 * Created by Einar Snorrason on 28/03/2018.
 */
public class AssignmentB {
    static BigInteger publicKey = new BigInteger("3192457456296028447170730893415873702237282322062154903814103785989586874053860169624443014307241056228683399078948308946240213223928094842460308552438070463668190428111746635035566372788715214572763825411754275108765612370229312538242879098074772931243449584736830418971889951541237162539893326666094910270140628851767398074989205950776486158159389812194885957740897837761491888471696315229808599200051683875194429975470688618929595679098894284933898995023166101362595274407927332295503715665637692263336367338684460012763387648934324519333506695400982235263912929785454840794336660219727271894739374362748110958100");
    static BigInteger p = new BigInteger("19552284362830564337966704355057166912804404031166711679236552569540216566780307826556867578871358576485437030942222195018081030691032539148764839230159556269162571104631125243645396734982908383768635645011674286516337887644532161784387787974377283092237245433092195388766919359771882576936876207694749870408589625208505941289702869304351315221501552209561943824085044377310530806829302917982399584945973266979228241186125402575932131348900342939564050820454479426591777063007833844106775705269150852739375278894162090022693591793968528405477303762423158664144555096918043468360406345994906124551793588849878747395663");
    static BigInteger g = new BigInteger("9369228326851588128067094743581477709920277496836775237312108149103793859242097392461261958047072509833337328257405846155281318370339212682244570311305939741139975814626041456655019240400261932984637262924772361302181863871716170249459932972459920378181623255028507760251027411367445715256986964725673431470297353925167168809737676619089616249592749350500663292938637146739170484968986364179811205356786577287741465593479791915227167723276173488551272429777303232759545362915489475948424327174196256541530719510063649963987466857385776890108389780914858553073795431739818845921967286222345192498103117402945212914400");
    static BigInteger q = new BigInteger("105232489643835277469852304646516456431850353561758360808645843167358376593733");
    static BigInteger gamma = new BigInteger("19279110241941451951679879925338641252960480753232344467297834695570050515312632067567516022839066331094822675996175721960380441326459815329916744060341375537643611434243197925663613961537646331497541902098232623520032406451413371764355304001983047360758897424255603968173954435620746320222709831546715154372219478236934238187227127941410300903014767526661155681294517936435321523776633717099882494426381012477454016593052841890434799608204267698018538797860358452607256979563827760353637207631240262985630295172187911905471569226230001718730168180569617909420309513928584393943860088213204569225100444731631643551172");
    static String n1Incomplete = ("25437293595366446869478279--475689151309-330-360499567-1867667289983332-98313");
    public static void main(String[] args){
        elGamalSolver(p,g,publicKey,n1Incomplete);
    }

    /**
     * Takes an incomplete private key to an elgamal system and prints the missing digits
     * @param p
     * @param g
     * @param h1 Public key
     * @param n1Incomplete Key we are trying to find
     */
    public static void elGamalSolver(BigInteger p,BigInteger g, BigInteger h1, String n1Incomplete){
        BigInteger NINE = new BigInteger("9");

        StringBuilder keyBuilder = new StringBuilder();
        // Array tracking the current value of each digit we need to find
        ArrayList<Integer> values = new ArrayList<>();
        // Array containing g^(10^i)%p
        ArrayList<BigInteger> exponents = new ArrayList<>();
        // Array containing the inverse of (9*g^(10^(i-1)%p)%p
        ArrayList<BigInteger> inverseExponents = new ArrayList<>();

        //Create first key (all digits set to 0)
        for (int i = 0; i< n1Incomplete.length(); i++){
            if (n1Incomplete.charAt(i)=='-'){
                keyBuilder.append('0');
                values.add(0,0);
                // Calculate exponents
                BigInteger exponent=BigInteger.TEN.pow(n1Incomplete.length()-1-i);
                inverseExponents.add(g.modPow(exponent.multiply(NINE),p).modInverse(p));
                exponents.add(g.modPow(exponent,p));
            }
            else{
                keyBuilder.append(n1Incomplete.charAt(i));
            }
        }
        BigInteger firstKey = new BigInteger(keyBuilder.toString());
        BigInteger value = g.modPow(firstKey,p);
        int counter = 0;
        // Begin search for the right key
        while(!value.equals(h1)){
            counter++;
            if (counter>100000000){
                System.out.println("Failed to find a key");
                return;
            }

            // Iterate values
            for (int i=0;i<values.size();i++){
                if (values.get(i)==9){
                    values.set(i,0);
                    value = value.multiply(inverseExponents.get(i)).mod(p);
                }
                else{
                    values.set(i,values.get(i)+1);
                    value=value.multiply(exponents.get(i)).mod(p);
                    break;
                }
            }
        }
        // Once the key is found, print the missing digits from most to least significant
        System.out.println("done");
        System.out.println(counter);
    }

}

//25437293595366446869478279884756891513095330936049956761867667289983332598313